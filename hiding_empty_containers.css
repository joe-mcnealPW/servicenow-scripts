Simple approach targeting the key attributes:
css/* Hide spans with ng-scope class that contain empty divs with widget="widget" */
span.ng-scope:has(> div[widget="widget"]:empty) {
  display: none;
}

/* Fallback for browsers without :has() support */
span.ng-scope > div[widget="widget"]:empty {
  display: none;
}
Even simpler if you want to be more general:
css/* Target any span with ng-scope containing empty widget divs */
.ng-scope:has(> [widget="widget"]:empty) {
  display: none;
}

/* Fallback */
.ng-scope > [widget="widget"]:empty {
  display: none;
}
Or if you want to target the pattern more broadly:
css/* Hide any container with ng-scope that has empty widget children */
span.ng-scope:has(div[widget="widget"]:empty:only-child) {
  display: none;
}

/* Fallback - just hide the empty widget div itself */
span.ng-scope > div[widget="widget"]:empty:only-child {
  display: none;
}



/* Hide both the span and the div when the div is empty */
span.ng-scope > div[widget="widget"]:empty,
span.ng-scope > div[widget="widget"]:empty + *,
span.ng-scope:not(:has(*:not(div[widget="widget"]:empty))) {
  display: none !important;
}







/* Hide the div when empty */
span.ng-scope > div[widget="widget"]:empty {
  display: none !important;
}

/* Hide the span when it only contains that div */
span.ng-scope > div[widget="widget"]:only-child:empty {
  display: none !important;
}

/* Target the parent span specifically */
span.ng-scope:empty {
  display: none !important;
}




